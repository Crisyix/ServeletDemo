/***账户***/

git config user.name 查看
git config user.email

绑定github：
	生成秘钥 ssh-keygen -t rsa -C "your_email@youremail.com"
	复制id_rsa.pub里面的秘钥
	在GitHub创建SSH and GPG keys
	验证  ssh -T git@github.com
	设置
	git config --global user.name "username"
	git config --global user.email "email"

/***仓库***/

本地创建文件夹 用git init 初始化
远程创建仓库，并创建README.md作为第一个commit
将本地绑定到远程仓库 git remote add origin git@github.com:Crisyix/repo_name
更新远程仓库到本地 git pull origin master
将本地commit更新到远程 git push origin master

/***版本控制***/
git commit -a -m "message" 添加修改并提交

git add forgotten_file
git commit --amend  //对上次提交的补充，实际上还是上次提交

git reset HEAD filename 撤销文件的add操作，也就是将文件移除暂缓区
git checkout -- filename，撤销对filename的修改，还原到上次提交的状态

撤销commit
git reset --hard commit-id/HEAD^^  HEAD指向需要撤回的commit 一个^代表上一个版本


/***分支管理***/
git branch <name> 创建新的分支
git checkout <name> 切换分支
git checkout -b <name> 创建并切换到新的分支

git merge <name> 合并name分支的修改到本分支，也就是与本分支的不同

git stash 存储当前的工作区以便返回其他分支进行工作（没有add的）
git stash apply  恢复存储的工作区 
	



/***标签***/

git tag tagname <commit id> 参数 默认为当前的head指向的commit  tagname一般为版本号
git tag -a tagname -n "descrition" <commit id> 添加此版本信息
git tag 查看所有标签     
git tag -d tagname 删除标签
git push origin tagname  推送此tag到对应的远程版本，显示为release,并可以在远程下载下载
git push origin --tags 推送所有未推送的tag

远程删除
	先删除本地的tagname，然后
	git push origin :refs/tags/tagname
